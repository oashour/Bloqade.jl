"""
    Tesselation <: AbstractLattice{2}

Supertype for all 2-dimensional tesselations for amorphous systems.

# Implementation

[`lattice_vectors`](@ref) will simply return the lattice vectors of a unit square
lattice. [`lattice_sites`](@ref) will return the appropriate tesselation.
"""
abstract type Tesselation <: AbstractLattice{2} end

"""
    lattice_vectors(::Tesselation)

Returns the unit vectors of a square lattice suitable for working with aperiodic tesselations.

The vectors are defined as:
- 𝐚₁ = (1.0, 0.0)
- 𝐚₂ = (0.0, 1.0) 
"""
lattice_vectors(::Tesselation) = ((1.0, 0.0), (0, 1.0))

"""
    struct VoronoiTesselation <: Tesselation

Type representing 2D Voronoi Tesselation for amorphous honeycomb-like systems.

Used as an argument of [`generate_sites`](@ref) function to produce a list of 
sites generated by Voronoi Tesselation of a randomly distributed and 
uncorrelated set of points, with number of generators being specified by an additional argument of [`generate_sites`](@ref).


```julia-repl
julia> generate_sites(VoronoiTesselation(), 20)
41-element AtomList{2, Float64}:
 (0.3049059159457401, 0.6399003059266747)
 (0.7000384244440795, 0.18882342907305963)
 ⋮
 (0.40540990739612615, 0.9601695550827287)
 (0.8843806747309563, 0.5856647742201923)

```
"""
struct VoronoiTesselation <: Tesselation end

"""
    struct KagomeTesselation <: Tesselation

Type representing a 2D kagome tesselation for amorphous kagome-like systems.

Used as an argument of [`generate_sites`](@ref) function to produce a list of 
sites generated by Kagomization of a voronoi tesselation of a randomly distributed and 
uncorrelated set of points, with number of site repetitions being specified by additional arguments of [`generate_sites`](@ref). Kagomization is done by taking the midpoints of the edges of the Voronoi polygons.

# TODO: change this example
# Example

```julia-repl
julia> generate_sites(KagomeTesselation(), 5, 5)
113-element AtomList{2, Float64}:
 (0.06927913716176962, 0.422854806713084)
 ⋮
 (0.18340249540713782, 0.12251302058695199)
 (0.2529507671239171, 0.06421184576319838)
```
"""
struct KagomeTesselation <: Tesselation end

"""
    generate_sites(lattice::AbstractLattice{D}, generators::Int; scale=1.0)

Returns an [`AtomList`](@ref) instance via tesselation of a randomly distributed and uncorrelated set of `generators` points. As a result, the number of sites will be larger than `generators`. `scale` is a real number that sets the size of the overall system, i.e., the resultant sites will roughly fit in a square of side length `scale`.
"""
function generate_sites(tesselation::Tesselation, generators::Int; scale = 1.0)
    scale > 0 || error("scale must be a positive real value.")

    # Generators
    points = rand(2, generators)
    tri = triangulate(points) # Delaunay Triangulation
    vorn = centroidal_smooth(voronoi(tri, clip = false)) # Voronoization

    # Generate sites
    if typeof(tesselation) == VoronoiTesselation
        sites = DelaunayTriangulation.get_polygon_points(vorn)
    elseif typeof(tesselation) == KagomeTesselation
        sites = Vector{Tuple{Float64,Float64}}()
        for poly in DelaunayTriangulation.get_polygons(vorn)
            vertices = DelaunayTriangulation.get_polygon_coordinates(vorn, poly[1])
            num_edges = length(vertices)
            for (i, p1) in enumerate(vertices)
                p2 = vertices[mod(i, num_edges)+1]
                push!(sites, (p1 .+ p2) ./ 2) # Push midpoint
            end
        end
    else
        error("Unknown Tesselation.")
    end
    atoms = AtomList(sites)
    # Clip and rescale
    return rescale_axes(clip_axes(atoms, (0.0, 1.0), (0.0, 1.0)), scale)
end